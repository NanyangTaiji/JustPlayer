package com.nytaiji.nybase;

import android.Manifest;
import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.provider.Settings;
import android.view.View;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.core.app.ActivityCompat;


public class PermissionsActivity extends AppCompatActivity implements ActivityCompat.OnRequestPermissionsResultCallback {

    private static final String TAG = PermissionsActivity.class.getSimpleName();

    public static final int PERMISSION_LENGTH = 3;
    public static final int STORAGE_PERMISSION = 0,
            INSTALL_APK_PERMISSION = 1,
            ALL_FILES_PERMISSION = 2;

    private final OnPermissionGranted[] permissionCallbacks =
            new OnPermissionGranted[PERMISSION_LENGTH];

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == STORAGE_PERMISSION) {
            if (isGranted(grantResults)) {
                enableScreenRotation(this);
                permissionCallbacks[STORAGE_PERMISSION].onPermissionGranted();
                permissionCallbacks[STORAGE_PERMISSION] = null;
            } else {
                Toast.makeText(this, "Permission requests failed!", Toast.LENGTH_SHORT).show();
                requestStoragePermission(permissionCallbacks[STORAGE_PERMISSION], false);
            }
        }
    }

    public boolean checkStoragePermission() {
        // Verify that all required contact permissions have been granted.
        return ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE)
                == PackageManager.PERMISSION_GRANTED;
    }

    public void requestStoragePermission(@NonNull final OnPermissionGranted onPermissionGranted, boolean isInitialStart) {
        disableScreenRotation(this);
        requestPermission(Manifest.permission.READ_EXTERNAL_STORAGE, STORAGE_PERMISSION, onPermissionGranted, isInitialStart);
    }


    private void requestPermission(final String permission, final int code, @NonNull final OnPermissionGranted onPermissionGranted, boolean isInitialStart) {
        permissionCallbacks[code] = onPermissionGranted;

        if (ActivityCompat.shouldShowRequestPermissionRationale(this, permission)) {
            AlertDialog.Builder builder = new AlertDialog.Builder(this);
            builder.setTitle("StoragePermission Request:");
            builder.setPositiveButton(R.string.confirm, (dialog, which) -> {
                        ActivityCompat.requestPermissions(PermissionsActivity.this, new String[]{permission}, code);
                        dialog.dismiss();
                    })
                    .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    })
                    .setCancelable(false);
            AlertDialog dialog = builder.create();
            dialog.show();
        } else if (isInitialStart) {
            ActivityCompat.requestPermissions(this, new String[]{permission}, code);
        } else {
            Toast.makeText(this, "StoragePermission Granting Failed", Toast.LENGTH_LONG).show();
        }
    }


    public void checkForExternalPermission(PermissionsActivity.OnPermissionGranted permissionGranted) {
        if (!checkStoragePermission()) {
            requestStoragePermission(permissionGranted, true);
        }
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            requestAllFilesAccess(permissionGranted);
        }
    }

    /**
     * Request all files access on android 11+
     *
     * @param onPermissionGranted permission granted callback
     */
    public void requestAllFilesAccess(@NonNull final OnPermissionGranted onPermissionGranted) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R && !Environment.isExternalStorageManager()) {

            AlertDialog.Builder builder = new AlertDialog.Builder(this);
            builder.setTitle("Permission Request:");
            builder.setPositiveButton(R.string.confirm, (dialog, which) -> {
                        disableScreenRotation(this);
                        permissionCallbacks[ALL_FILES_PERMISSION] = onPermissionGranted;
                        try {
                            Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION)
                                            .setData(Uri.parse("package:" + getPackageName()));
                            startActivity(intent);
                        } catch (Exception e) {
                           // Log.e(TAG, "Failed to initial activity to grant all files access", e);
                            Toast.makeText(this, "Failed to initial activity to grant all files access!", Toast.LENGTH_SHORT).show();
                            dialog.dismiss();
                        }
                    })
                    .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    })
                    .setCancelable(false);

            //the following is essential for showing a long list
           /* AlertDialog dialog = builder.create();
            dialog.setOnShowListener(dlg -> {
                AlertDialog adlg = (AlertDialog) dlg;
                View v = adlg.getWindow().findViewById(R.id.contentPanel);
                if (v != null) {
                    ((LinearLayoutCompat.LayoutParams) v.getLayoutParams()).weight = 1;
                    v.setBackgroundResource(R.color.colorSilver);
                }
            });
            dialog.show();*/
        }
    }

    private boolean isGranted(int[] grantResults) {
        return grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED;
    }

    public interface OnPermissionGranted {
        void onPermissionGranted();
    }

    public static void disableScreenRotation(@NonNull Activity activity) {
        int screenOrientation = activity.getResources().getConfiguration().orientation;

        if (screenOrientation == Configuration.ORIENTATION_LANDSCAPE) {
            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
        } else if (screenOrientation == Configuration.ORIENTATION_PORTRAIT) {
            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        }
    }

    public static void enableScreenRotation(@NonNull Activity activity) {
        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
    }

}
