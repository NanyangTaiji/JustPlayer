package com.nytaiji.player.muPdf;


import static com.nytaiji.nybase.model.Constants.VIDEO_INDEX;
import static com.nytaiji.nybase.model.Constants.VIDEO_LIST;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.net.Uri;
import android.os.AsyncTask;
import android.provider.MediaStore;
import android.util.Log;
import android.view.View;
import android.webkit.MimeTypeMap;

import com.artifex.mupdf.fitz.Cookie;
import com.artifex.mupdf.viewer.MuPDFCore;
import com.nytaiji.nybase.utils.NyFileUtil;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLDecoder;
import java.security.MessageDigest;
import java.util.ArrayList;

/**
 * 文件查看相关工具类
 *
 * @author hanlyjiang 2017/3/13
 * @version 1.0
 */
public class FileViewerUtils {
    private static final String TAG = "FileViewerUtils";

    public static final int FILE_EDIT = 0;

    private static int vIndex=-1;
    public static void loadMuPdfListTask(Context context, String path) {
   /* new Thread(new Runnable() {
      @Override
      public void run() {
        try {*/
        ArrayList<String> allMuPDFs = fetchMuPDFInOneDirectory(path);
        Intent intent = new Intent(context, MuPDFActivity.class);
        intent.putStringArrayListExtra(VIDEO_LIST, allMuPDFs);
        intent.putExtra(VIDEO_INDEX, vIndex);

        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_DOCUMENT);
        context.startActivity(intent);
    /*    } catch (Exception ignored) {
        }
      }
    }).start();*/
    }

    private static ArrayList<String> fetchMuPDFInOneDirectory(String path) {
        vIndex = 0;
        ArrayList<String> dirMuPDFs = new ArrayList<>();
        if (NyFileUtil.isOnline(path)) {
            dirMuPDFs.add(path);
            return dirMuPDFs;
        }

        //--------------------
        String fileName = NyFileUtil.getFileNameWithoutExtFromPath(path);
        File file1 = new File(path);
        if (!file1.isDirectory()) {
            file1 = file1.getParentFile();
        }
        int i = 0;
        assert file1 != null;
        File[] files = file1.listFiles();
        if (files != null) {
            for (File file : files) {
                String tempPath = file.getAbsolutePath();
                if (NyFileUtil.isMuPdf(tempPath)) {
                    dirMuPDFs.add(tempPath);
                    if (fileName.equals(NyFileUtil.getFileNameWithoutExtFromPath(tempPath)))
                        vIndex = i;
                    i++;
                }
            }
        }

   /* SharedPreferences playerPrefs = App.getAppContext().getSharedPreferences(MAIN_SETTINGS, Context.MODE_PRIVATE);
    boolean toShuffle = playerPrefs.getBoolean(KEY_SHUFFLE, true);
    if (toShuffle) Collections.shuffle(dirMuPDFs, new Random());*/
        return new ArrayList<>(dirMuPDFs);
    }

    /**
     * 查看文件
     *
     * @param filePath
     */
    public static void viewFile(Context activity, String filePath) {
        Intent intent = new Intent();

        if (!NyFileUtil.isOnline(filePath)) {
            File viewFile = new File(filePath);
            intent.setDataAndType(Uri.fromFile(viewFile), getMimeType(viewFile));
        } else {
            Log.e(TAG, "online:" + getMimeType(filePath));
            intent.setDataAndType(Uri.parse(filePath), getMimeType(filePath));
        }

        intent.addCategory("android.intent.category.DEFAULT");
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        activity.startActivity(intent);
    }

    /**
     * Android 4.4 系统上文件查看
     *
     * @param context
     * @param fileName
     */
    public static void viewFile4_4(Context context, String fileName) {
        String ext = getExtension(fileName);
      /*  if (TextUtils.isEmpty(ext)) {
            AndroidUtils.showToast(context, context.getString(R.string.file_not_recognized));
            return;
        }*/
        Intent intent = FileViewIntentUtils.getFileViewIntent(context, fileName);
        if (intent != null) {
            Intent newIntent = Intent.createChooser(intent, "Choose one activity to open!");
            context.startActivity(newIntent);
        } else {
            FileViewerUtils.viewFile(context, fileName);
        }
    }

    /**
     * Gets the extension of a file name, like ".png" or ".jpg".
     *
     * @param fileName
     * @return Extension including the dot("."); "" if there is no extension;
     * null if fileName was null.
     */
    public static String getExtension(String fileName) {
        if (fileName == null) {
            return null;
        }
        int dot = fileName.lastIndexOf(".");
        if (dot >= 0) {
            return fileName.substring(dot);
        } else {
            // No extension.
            return "";
        }
    }


    /**
     * Get The MIME type for the given file.
     *
     * @param file given file
     * @return The MIME type for the given file.
     */
    public static String getMimeType(File file) {

        String extension = getExtension(file.getName());

        if (extension.length() > 0)
            return MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension.substring(1));

        return "application/octet-stream";
    }

    public static String getMimeType(String filePath) {

        String extension = getExtension(filePath);

        if (extension.length() > 0)
            return MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension.substring(1));

        return "application/octet-stream";
    }


    /**
     * 打开文件
     *
    // * @param path 文件路径
     * @return
     */


    private static File createFileFromInputStream(InputStream inputStream, String fileName) {
        try {
            File f = new File(fileName);
            f.setWritable(true, false);
            OutputStream outputStream = new FileOutputStream(f);
            byte[] buffer = new byte[1024];
            int length = 0;

            while ((length = inputStream.read(buffer)) > 0) {
                outputStream.write(buffer, 0, length);
            }

            outputStream.close();
            inputStream.close();

            return f;
        } catch (IOException e) {
            System.out.println("error in creating a file");
            e.printStackTrace();
        }

        return null;
    }

    public static class RetrieveOnline extends AsyncTask<String, Void, byte[]> {
        protected byte[] doInBackground(String... urls) {
            InputStream inputStream = null;
            try {
                URL url = new URL(urls[0]);
                ByteArrayOutputStream output = null;
                output = new ByteArrayOutputStream();
                URLConnection conn = url.openConnection();
                conn.setRequestProperty("User-Agent", "Firefox");
                inputStream = conn.getInputStream();
                int n = 0;
                byte[] buffer = new byte[1024];
                while (-1 != (n = inputStream.read(buffer))) {
                    output.write(buffer, 0, n);
                }
                inputStream.close();
                return output.toByteArray();
            } catch (Exception e) {
                return null;
            }
        }

        protected void onPostExecute(byte[] buffer) {
            // TODO: check this.exception
            // TODO: do something with the feed
        }
    }


  /*  public static byte[] BufferFromSmb(Context context, String fileName) {
        String passWord = "N";
        Cipher cipher = null;
        if (fileName.contains("_NY")) {
            passWord = getPasswordFromFileName(fileName);
            cipher = LevelCipherOnly(passWord);
        }
        SmbManager smbManager = SmbManager.getInstance();
        final long size = smbManager.getController().getFileLength(fileName);
        final InputStream smbInputStream = smbManager.getController().getFileInputStream(fileName);

        byte[] buffer = new byte[(int) size];
        try {
            ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();
            InputStream inputStream;
            if (passWord.equals("N")) inputStream = smbInputStream;
            else
                inputStream = new CipherInputStream(smbInputStream, cipher);
            byte[] data = new byte[16384];
            int bytesRead;
            while ((bytesRead = inputStream.read(data)) != -1) {
                bufferStream.write(data, 0, bytesRead);
            }
            smbInputStream.close();
            inputStream.close();
            bufferStream.flush();
            buffer = bufferStream.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return buffer;
    }*/

    public static String getNameFromBuff(byte[] buffer) {
        String fileName = null;
        try {
            fileName = toHex(MessageDigest.getInstance("MD5").digest(buffer));
        } catch (Exception e) {
        }
        return fileName;
    }

    private static String toHex(byte[] digest) {
        StringBuilder builder = new StringBuilder(2 * digest.length);
        for (byte b : digest)
            builder.append(String.format("%02x", b));
        return builder.toString();
    }


    public static void shareScreenView(Context ctx, MuPDFCore core, int page, String fileName) {
        try {
            fileName = URLDecoder.decode(NyFileUtil.getFileNameWithoutExtFromPath(fileName), "UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        fileName = fileName + "_" + page + ".jpg";

        Bitmap bitmap = Bitmap.createBitmap((int) core.getPageSize(page).x, (int) core.getPageSize(page).y, Bitmap.Config.ARGB_8888);
        core.drawPage(bitmap, page, (int) core.getPageSize(page).x, (int) core.getPageSize(page).y, 0, 0, (int) core.getPageSize(page).x, (int) core.getPageSize(page).y, new Cookie());
        // shareBitmap(ctx, screenShot(view));
        save(bitmap, new File(NyFileUtil.getEditDir(), fileName));
    }

    private static String save(Bitmap bitmap, File image) {

        FileOutputStream out = null;
        try {
            out = new FileOutputStream(image.getAbsolutePath());
            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, out);
            return image.getAbsolutePath();
        } catch (Exception e) {
            return null;
        } finally {
            try {
                if (out != null) {
                    out.close();
                }
            } catch (Throwable ignore) {
            }
        }
    }

   /* public static void shareScreenView(Context ctx, MuPDFReaderView view, String fileName) {
        try {
            fileName = URLDecoder.decode(NyFileUtil.getFileNameWithoutExtFromPath(fileName), "UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        fileName = fileName + "-" + view.getDisplayedViewIndex() + ".jpg";
        save(screenShot(view), new File(NyFileUtil.getEditDir(), fileName));
        // shareBitmap(ctx, screenShot(view));
    }*/

    private static Bitmap screenShot(View view) {
        Bitmap bitmap = Bitmap.createBitmap(view.getWidth(), view.getHeight(), Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap);
        view.draw(canvas);
        return bitmap;
    }

    private static void shareBitmap(Context ctx, Bitmap bitmap) {
        String pathofBmp = MediaStore.Images.Media.insertImage(ctx.getContentResolver(),
                bitmap, "title", null);
        Uri uri = Uri.parse(pathofBmp);
        Intent shareIntent = new Intent(Intent.ACTION_SEND);
        shareIntent.setType("image/*");
        shareIntent.putExtra(Intent.EXTRA_SUBJECT, "Star App");
        shareIntent.putExtra(Intent.EXTRA_TEXT, "");
        shareIntent.putExtra(Intent.EXTRA_STREAM, uri);
        ctx.startActivity(Intent.createChooser(shareIntent, "hello hello"));
    }
}
