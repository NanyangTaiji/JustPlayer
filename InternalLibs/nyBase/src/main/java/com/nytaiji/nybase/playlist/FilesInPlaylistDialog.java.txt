package com.nytaiji.nybase.playlist;

import android.app.Activity;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.PopupMenu;


import com.amaze.filemanager.fileoperations.filesystem.OpenMode;
import com.nytaiji.nybase.NyDisplayFragment;
import com.nytaiji.nybase.R;
import com.nytaiji.nybase.model.NyHybrid;
import com.nytaiji.nybase.utils.NyFileUtil;

import java.util.ArrayList;
import java.util.List;

public class FilesInPlaylistDialog {

    private Context context;
    private AlertDialog filesDialog;

    private List<PlaylistFile> filesInPlaylist;
    private List<String> fileNamesInPlaylist = new ArrayList<>();

    public FilesInPlaylistDialog(Context context) {
        this.context = context;
    }

    //TODO be extended
    protected void proccesFile(NyHybrid file) {
        NyDisplayFragment.show(((AppCompatActivity) context).getSupportFragmentManager(), file);
    }

    public void showFilesInPlaylistDialog(long playlistId) {
        // Retrieve files in the playlist from the database
        PlaylistHelper playlistHelper = PlaylistHelper.getInstance(context);
        filesInPlaylist = playlistHelper.getFilesInPlaylist(playlistId);

        for (PlaylistFile file : filesInPlaylist) {
            fileNamesInPlaylist.add(NyFileUtil.getLastSegmentFromString(file.getPath()));
        }
        // Create and show the dialog
        AlertDialog.Builder builder = new AlertDialog.Builder(context);
        View dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_files_in_playlist, null);
        builder.setView(dialogView);

        ListView filesListView = dialogView.findViewById(R.id.files_in_playlist);
        ArrayAdapter<String> filesAdapter = new ArrayAdapter<>(context, android.R.layout.simple_list_item_1, fileNamesInPlaylist);
        filesListView.setAdapter(filesAdapter);
        filesListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                String filePath = filesInPlaylist.get(position).getPath();
                OpenMode mode = filesInPlaylist.get(position).getOpenMode();
                NyHybrid file = new NyHybrid(mode, filePath);
                if (mode != OpenMode.PLAY_LIST) {
                    if (!file.isDirectory(context)) {
                        proccesFile(file);
                        filesDialog.dismiss();
                    } else {//is a directory
                        ArrayList<NyHybrid> listFile = file.listChildrenFiles(context);
                        filesInPlaylist.remove(position);
                        fileNamesInPlaylist.remove(position);
                        for (NyHybrid hybridParcelable : listFile) {
                            filesInPlaylist.add(new PlaylistFile(hybridParcelable.getPath(), false, hybridParcelable.getMode()));
                            fileNamesInPlaylist.add(NyFileUtil.getLastSegmentFromString(hybridParcelable.getPath()));
                        }
                        filesAdapter.notifyDataSetChanged();
                    }
                } else if (mode == OpenMode.PLAY_LIST) {
                    long currentId = playlistHelper.getPlaylistIdByName(fileNamesInPlaylist.get(position));
                    List<PlaylistFile> filesInPlaylistNew = playlistHelper.getFilesInPlaylist(currentId);

                    filesInPlaylist.remove(position);
                    fileNamesInPlaylist.remove(position);
                    for (PlaylistFile file1 : filesInPlaylistNew) {
                        fileNamesInPlaylist.add(NyFileUtil.getLastSegmentFromString(file1.getPath()));
                        filesInPlaylist.add(file1);
                    }
                    filesAdapter.notifyDataSetChanged();
                    // showFilesInPlaylistDialog(currentId);
                } else {
                    if (mode == OpenMode.FILE) {
                        playlistHelper.removeFileFromPlaylist(playlistId, filePath);
                        fileNamesInPlaylist.remove(position);
                        filesAdapter.notifyDataSetChanged();
                        Toast.makeText(context, "The file does not exist anymore", Toast.LENGTH_SHORT).show();
                    }
                }
            }
        });

        // Add onItemLongClick listener to display a menu of playlists
        filesListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
                PopupMenu popupMenu = new PopupMenu(context, view);
                popupMenu.inflate(R.menu.playlist_menu); // Inflate the playlist menu XML
                popupMenu.getMenu().findItem(R.id.menu_edit).setVisible(false);
                // Set listener for delete item
                popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
                    @Override
                    public boolean onMenuItemClick(MenuItem item) {
                        int itemId = item.getItemId();
                        if (itemId == R.id.menu_delete) {
                            playlistHelper.removeFileFromPlaylist(playlistId, filesInPlaylist.get(position).getPath());
                            fileNamesInPlaylist.remove(position);
                            filesAdapter.notifyDataSetChanged();
                            return true;
                        } else if (itemId == R.id.menu_share) {// Handle share action
                            return true;
                        } else if (itemId == R.id.menu_webShare) {// Handle web share action
                            return true;
                        } else if (itemId == R.id.add_to_playlist) {
                            filesDialog.dismiss();
                            new PlaylistDialog(context).showDialog(filesInPlaylist.get(position).getPath(), filesInPlaylist.get(position).getOpenMode(),null);
                            return true;
                        }
                        return false;
                    }
                });

                // Show the PopupMenu at the clicked position
                popupMenu.show();
                return true;
            }
        });

        builder.setTitle("Files in Playlist")
                .setNegativeButton("Close", null);

        filesDialog = builder.create();
        filesDialog.show();
    }
}

