package com.nytaiji.nybase.cast;


import android.content.Intent;
import android.content.ServiceConnection;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.core.view.MenuItemCompat;
import androidx.mediarouter.app.MediaRouteActionProvider;
import androidx.mediarouter.app.MediaRouteButton;
import androidx.mediarouter.media.MediaControlIntent;
import androidx.mediarouter.media.MediaRouteSelector;

import com.google.android.gms.cast.MediaInfo;
import com.google.android.gms.cast.MediaLoadRequestData;
import com.google.android.gms.cast.MediaMetadata;
import com.google.android.gms.cast.framework.CastButtonFactory;
import com.google.android.gms.cast.framework.CastContext;
import com.google.android.gms.cast.framework.CastSession;
import com.google.android.gms.cast.framework.CastStateListener;
import com.google.android.gms.cast.framework.IntroductoryOverlay;
import com.google.android.gms.cast.framework.SessionManager;
import com.google.android.gms.cast.framework.SessionManagerListener;
import com.google.android.gms.cast.framework.media.RemoteMediaClient;
import com.nytaiji.nybase.NyPermissionsActivity;
import com.nytaiji.nybase.R;
import com.nytaiji.nybase.amazeStreamer.AmazeStreamer;
import com.nytaiji.nybase.amazeStreamer.AmazeStreamerService;
import com.nytaiji.nybase.amazeStreamer.AmazeStreamerServiceConnection;
import com.nytaiji.nybase.model.NyHybrid;
import com.nytaiji.nybase.network.WifiUtil;

import org.jetbrains.annotations.Nullable;

import java.lang.ref.WeakReference;

public abstract class NyCastActivity extends NyPermissionsActivity {
    private static final String TAG = NyCastActivity.class.getSimpleName();

    private IntroductoryOverlay mIntroductoryOverlay;
    private CastContext mCastContext;
    private CastSession mCastSession;
    private SessionManager mSessionManager;
    public AmazeStreamerService amazeStreamerService;
    private AmazeStreamer amazeStreamer;
    private ServiceConnection streamerServiceConnection;
    private SessionManagerListener<CastSession> mSessionManagerListener;
    public boolean castSetupSuccess = false;
    public boolean isCasting = false;
    public String wifiIpAddress = null;
    public NyHybrid hybrid;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        initCastContext();
        streamerServiceConnection = new AmazeStreamerServiceConnection(new WeakReference<>(this));
        disconnectCaster();
    }

    public void setCastingLink(NyHybrid hybrid, String mimeType) {
        this.hybrid = hybrid;
        startCastPlayback(hybrid, mimeType);
    }

    private void disconnectCaster() {
        if (mSessionManager != null) mSessionManager.endCurrentSession(true);
    }

    @Override
    protected void onResume() {
        super.onResume();
        initCastContext();
        Intent intent = new Intent(this, AmazeStreamerService.class);
        bindService(intent, streamerServiceConnection, 0);
    }

    @Override
    protected void onPause() {
        super.onPause();
        if (mSessionManagerListener != null)
            mSessionManager.removeSessionManagerListener(mSessionManagerListener, CastSession.class);
        mCastSession = null;
        unbindService(streamerServiceConnection);
    }

    @Override
    protected void onDestroy() {
        stopMedia();
        disconnectCaster();
        if (CastService.getInstance() != null) CastService.getInstance().onDestroy();
        clearCastResources();
        super.onDestroy();
    }

    private void initCastContext() {
        try {
            mCastContext = CastContext.getSharedInstance(getApplicationContext());

            mCastContext.addCastStateListener((CastStateListener) (new CastStateListener() {
                public void onCastStateChanged(int state) {
                    if (state != 1) {
                        showIntroductoryOverlay();
                    }

                }
            }));

            mSessionManager = mCastContext.getSessionManager();
            setUpCastListener();
            if (mSessionManagerListener != null)
                mSessionManager.addSessionManagerListener(mSessionManagerListener, CastSession.class);
            mCastSession = mSessionManager.getCurrentCastSession();
            castSetupSuccess = true;
        } catch (Exception e) {
            Log.w(TAG, "Failed to initialize cast context: " + e.toString());
            castSetupSuccess = false;
            isCasting = false;
        }
    }

    private void setUpCastListener() {
        mSessionManagerListener = new SessionManagerListener<CastSession>() {
            @Override
            public void onSessionStarted(CastSession castSession, String sessionId) {
                onApplicationConnected(castSession);
                showToastInCenter(getResources().getString(R.string.ready_to_cast));
                isCasting = true;
                wifiIpAddress = WifiUtil.wifiIpAddress(NyCastActivity.this);
                if (amazeStreamerService == null) {
                    AmazeStreamerService.runService(NyCastActivity.this);
                }
            }

            @Override
            public void onSessionEnded(CastSession castSession, int error) {
                onApplicationDisconnected();
                showToastInCenter(getResources().getString(R.string.cast_ended));
                isCasting = false;
                wifiIpAddress = null;
                clearCastResources();
            }

            @Override
            public void onSessionResumed(CastSession castSession, boolean wasSuspended) {
                onApplicationConnected(castSession);
                showToastInCenter(getResources().getString(R.string.cast_resumed));
                isCasting = true;
                wifiIpAddress = WifiUtil.wifiIpAddress(NyCastActivity.this);
                if (amazeStreamerService == null) {
                    AmazeStreamerService.runService(NyCastActivity.this);
                }
            }

            @Override
            public void onSessionResuming(@NonNull CastSession castSession, @NonNull String s) {

            }

            @Override
            public void onSessionStartFailed(@NonNull CastSession castSession, int i) {

            }

            @Override
            public void onSessionResumeFailed(CastSession castSession, int error) {
                onSessionEnded(castSession, error);
            }

            @Override
            public void onSessionStarting(CastSession castSession) {
                showToastInCenter(getResources().getString(R.string.establishing_cast));
            }

            @Override
            public void onSessionEnding(CastSession castSession) {
                showToastInCenter(getResources().getString(R.string.cast_ending));
            }

            @Override
            public void onSessionSuspended(CastSession castSession, int reason) {
                showToastInCenter(getResources().getString(R.string.cast_suspended));
                isCasting = false;
                clearCastResources();
            }

            private void onApplicationConnected(CastSession castSession) {
                NyCastActivity.this.mCastSession = castSession;
                NyCastActivity.this.invalidateOptionsMenu();
                if (hybrid != null) startCastPlayback(hybrid);
                Log.e(TAG, "onApplicationConnected");
            }

            private void onApplicationDisconnected() {
                NyCastActivity.this.mCastSession = null;
                NyCastActivity.this.invalidateOptionsMenu();
                Log.e(TAG, "onApplicationDisconnected");
            }
        };
    }

    private void submitStreamSrc(NyHybrid hybrid) {
        if (amazeStreamerService != null) {
            amazeStreamerService.setStreamSrc(hybrid);
        }
    }

    public void startCastPlayback(NyHybrid hybrid) {
        startCastPlayback(hybrid, null);
    }

    public void startCastPlayback(NyHybrid hybrid, String mimeType) {
        if (mimeType == null) mimeType = hybrid.getMimeType();
        initCastContext();
        if (amazeStreamerService == null) {
            AmazeStreamerService.runService(this);
        }
        if (mCastSession == null) {
            return;
        }

        submitStreamSrc(hybrid);
        String ipAddress = WifiUtil.wifiIpAddress(this);
        if (ipAddress != null) {
            Uri mediaFileUri = hybrid.getUri();
            if (mediaFileUri != null) {
                Uri uri = Uri.parse("http://" + ipAddress + ":" + AmazeStreamer.PORT + mediaFileUri.getEncodedPath());
                MediaMetadata metadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_GENERIC);
                metadata.putString(MediaMetadata.KEY_TITLE, hybrid.getName());
                metadata.putString(MediaMetadata.KEY_SUBTITLE, hybrid.getPath());
                MediaInfo mediaInfo = new MediaInfo.Builder(uri.toString())
                        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)
                        .setMetadata(metadata)
                        .setContentType(mimeType)
                        .build();

                mCastSession.getRemoteMediaClient().load(
                        new MediaLoadRequestData.Builder().setMediaInfo(mediaInfo).setAutoplay(true).build()
                );
            }
        }
    }

    private void clearCastResources() {
        if (amazeStreamer != null) {
            amazeStreamer.stop();
            amazeStreamer = null;
        }
    }

    public MenuItem menuConnectRoute, menuPlayRoute, menuStopRoute;
    @Override
    public boolean onCreateOptionsMenu(@Nullable Menu menu) {

        getMenuInflater().inflate(R.menu.casting, menu);
        menuConnectRoute = CastButtonFactory.setUpMediaRouteButton(this.getApplicationContext(), menu, R.id.menu_connect_route);
        // Create a MediaRouteSelector for all Cast devices
        MediaRouteSelector mediaRouteSelector = new MediaRouteSelector.Builder()
                .addControlCategory(MediaControlIntent.CATEGORY_LIVE_AUDIO)
                .addControlCategory(MediaControlIntent.CATEGORY_LIVE_VIDEO)
                .addControlCategory(MediaControlIntent.CATEGORY_REMOTE_PLAYBACK)
                .build();

        MediaRouteActionProvider mediaRouteActionProvider = (MediaRouteActionProvider) MenuItemCompat.getActionProvider(menuConnectRoute);
        mediaRouteActionProvider.setRouteSelector(mediaRouteSelector);

        //the other two items
        menuPlayRoute = menu.findItem(R.id.menu_play_route);
        menuPlayRoute.setVisible(hybrid != null);
        menuStopRoute = menu.findItem(R.id.menu_stop_route);
        menuStopRoute.setVisible(mCastSession != null && hybrid != null);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int itemId = item.getItemId();
        if (itemId == R.id.menu_stop_route) {
            stopMedia();
        } else if (itemId == R.id.menu_play_route) {
            // Implement play route functionality here if needed
        }
        return true;
    }

    public final void stopMedia() {
        if (mCastSession != null) {
            RemoteMediaClient mediaClient = mCastSession.getRemoteMediaClient();
            if (mediaClient != null) {
                mediaClient.stop();
            }
        }
    }

    private void showIntroductoryOverlay() {
        if (mIntroductoryOverlay != null) mIntroductoryOverlay.remove();
        if (menuConnectRoute != null && menuConnectRoute.isVisible()) {
            new Handler().post(() -> {
                mIntroductoryOverlay = new IntroductoryOverlay.Builder(NyCastActivity.this, menuConnectRoute)
                        .setTitleText("Cast media to device")
                        .setSingleTime()
                        .setOnOverlayDismissedListener(() -> mIntroductoryOverlay = null)
                        .build();
                mIntroductoryOverlay.show();
            });
        }
    }

    public void refactorCastButton(MediaRouteButton mediaRouteButton) {
        if (isCasting) {
            mediaRouteButton.setRemoteIndicatorDrawable(getResources().getDrawable(R.drawable.ic_cast_connected));
            mediaRouteButton.setVisibility(View.VISIBLE);
            CastButtonFactory.setUpMediaRouteButton(getApplicationContext(), mediaRouteButton);
        } else {
            mediaRouteButton.setRemoteIndicatorDrawable(getResources().getDrawable(R.drawable.ic_cast));
            if (WifiUtil.wifiIpAddress(this) != null) {
                mediaRouteButton.setVisibility(View.VISIBLE);
                if (!castSetupSuccess) {
                    mediaRouteButton.setOnClickListener(v -> showToastInCenter(getString(R.string.cast_framework_unavailable)));
                } else {
                    CastButtonFactory.setUpMediaRouteButton(getApplicationContext(), mediaRouteButton);
                }
            } else {
                mediaRouteButton.setVisibility(View.GONE);
            }
        }
    }

    public void showCastFileDialog(NyHybrid hybrid, String mimeType, Runnable inbuiltCallback) {
        initCastContext();
        if (!isCasting) {
            inbuiltCallback.run();
        } else {
            new AlertDialog.Builder(this, R.style.DialogTheme)
                    .setTitle(R.string.open_with)
                    .setPositiveButton(R.string.inbuilt_player, (dialog, which) -> {
                        inbuiltCallback.run();
                        dialog.dismiss();
                    })
                    .setNeutralButton(R.string.cancel, (dialog, which) -> dialog.dismiss())
                    .setNegativeButton(R.string.chromecast, (dialog, which) -> {
                        startCastPlayback(hybrid, mimeType);
                        dialog.dismiss();
                    })
                    .create()
                    .show();
        }
    }
}


