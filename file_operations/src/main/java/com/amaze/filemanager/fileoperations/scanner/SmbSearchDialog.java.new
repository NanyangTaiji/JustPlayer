package com.amaze.filemanager.ui.dialogs;


import android.app.Dialog;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.fragment.app.DialogFragment;

import com.amaze.filemanager.R;
import com.amaze.filemanager.scanner.Device;
import com.amaze.filemanager.scanner.NetworkScanner;
import com.amaze.filemanager.scanner.OnNetworkScanListener;
import com.amaze.filemanager.core.MainActivity;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;


public class SmbSearchDialog extends DialogFragment {

    private ArrayList<Device> connectedDevices = new ArrayList<>();
    private DeviceAdapter arrayAdapter;
    private ListView scannedDevices;
    private ProgressBar progressBar;

    @NonNull
    @Override
    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
        AlertDialog.Builder builder = new AlertDialog.Builder(requireActivity());
        LayoutInflater inflater = requireActivity().getLayoutInflater();
        View view = inflater.inflate(R.layout.fragment_scan, null);
        progressBar = view.findViewById(R.id.progress_bar);
        scannedDevices = view.findViewById(R.id.scanned_devices);
        arrayAdapter = new DeviceAdapter(requireContext(), connectedDevices);
        scannedDevices.setAdapter(arrayAdapter);

        scannedDevices.setOnItemClickListener((parent, view1, position, id) -> {
            Device selectedDevice = connectedDevices.get(position);

            if (getActivity() != null && getActivity() instanceof MainActivity) {
                NetworkScanner.stopScan();
                dismiss();
                MainActivity mainActivity = (MainActivity) getActivity();
                mainActivity.showSMBDialog(
                        selectedDevice.hostname,
                        selectedDevice.ipAddress,
                        false
                );
            }
        });

        builder.setView(view)
                .setTitle("Scan Results")
                .setMessage("Scanning...")
                .setNegativeButton("Close", (dialog, which) -> {
                            dialog.dismiss();
                            NetworkScanner.stopScan();
                        }
                );

        return builder.create();
    }

    @Override
    public void onStart() {
        super.onStart();
        scan();
    }

    private void scan() {
        NetworkScanner.init(requireContext());

        if (NetworkScanner.isRunning()) {
            setMessage("Please wait...");
            return;
        }
        progressBar.setVisibility(View.VISIBLE); // Show ProgressBar
        NetworkScanner.scan(new OnNetworkScanListener() {
            @Override
            public void onComplete(List<Device> devices) {
                connectedDevices.clear();
                connectedDevices.addAll(devices);
                connectedDevices.sort(new Comparator<Device>() {
                    @Override
                    public int compare(Device device1, Device device2) {
                        return device1.ipAddress.compareTo(device2.ipAddress);
                    }
                });
                arrayAdapter.notifyDataSetChanged();
                setMessage(devices.size() + " devices detected");
                progressBar.setVisibility(View.GONE); // Hide ProgressBar
            }

            @Override
            public void onFailed() {
                progressBar.setVisibility(View.GONE); // Hide ProgressBar
                setMessage("Failed to scan");
            }
        });
    }

    private void setMessage(String message) {
        if (getDialog() != null) {
            ((AlertDialog) getDialog()).setMessage(message);
        }
    }

    private static class DeviceAdapter extends ArrayAdapter<Device> {

        public DeviceAdapter(@NonNull android.content.Context context, @NonNull List<Device> devices) {
            super(context, 0, devices);
        }

        @NonNull
        @Override
        public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {
            ViewHolder holder;
            if (convertView == null) {
                convertView = LayoutInflater.from(getContext()).inflate(android.R.layout.simple_list_item_2, parent, false);
                holder = new ViewHolder();
                holder.deviceName = convertView.findViewById(android.R.id.text1);
                holder.ipAddress = convertView.findViewById(android.R.id.text2);
                convertView.setTag(holder);
            } else {
                holder = (ViewHolder) convertView.getTag();
            }

            Device device = getItem(position);
            if (device != null) {
                holder.deviceName.setText(device.hostname);
                holder.ipAddress.setText(device.ipAddress);
            }

            return convertView;
        }

        private static class ViewHolder {
            TextView deviceName;
            TextView ipAddress;
        }
    }
}

